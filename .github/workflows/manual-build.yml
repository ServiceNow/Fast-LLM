name: Manual Docker Build

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        default: 'main'
        type: string
      tag_suffix:
        description: 'Tag suffix (e.g., "test", "b200")'
        required: false
        default: 'manual'
        type: string
      push_image:
        description: 'Push image to registry'
        required: false
        default: true
        type: boolean

jobs:
  manual-docker-build:
    name: Manual Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Clean unused files
        run: |
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/servicenow/fast-llm
          tags: |
            type=raw,value=${{ inputs.branch }}-${{ inputs.tag_suffix }}
            type=sha,prefix=${{ inputs.branch }}-${{ inputs.tag_suffix }}-
            type=raw,value=latest-${{ inputs.tag_suffix }},enable=${{ inputs.branch == 'main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: ${{ inputs.push_image }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/servicenow/fast-llm:cache
          cache-to: type=registry,ref=ghcr.io/servicenow/fast-llm:cache,mode=max

      - name: Output image tags
        run: |
          echo "Built Docker image with tags:"
          echo "${{ steps.meta.outputs.tags }}"
